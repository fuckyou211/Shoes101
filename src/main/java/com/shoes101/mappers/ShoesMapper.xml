<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shoes101.mapper.ShoesMapper" >
  <resultMap id="BaseResultMap" type="com.shoes101.pojo.Shoes" >
    <id column="shoesid" property="shoesid" jdbcType="INTEGER" />
    <result column="shoesname" property="shoesname" jdbcType="VARCHAR" />
    <result column="catalogid" property="catalogid" jdbcType="INTEGER" />
    <result column="sales" property="sales" jdbcType="INTEGER" />
    <result column="isdropoff" property="isdropoff" jdbcType="VARCHAR" />
    <result column="adddate" property="adddate" jdbcType="VARCHAR" />
    <result column="shoesdetails" property="shoesdetails" jdbcType="VARCHAR" />
    <result column="label" property="label" jdbcType="VARCHAR"/>
  </resultMap>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from shoes
    where shoesid = #{shoesid,jdbcType=INTEGER}
  </delete>
  <insert id="insert"  useGeneratedKeys="true"  parameterType="com.shoes101.pojo.Shoes" >
    <selectKey resultType="java.lang.Integer"  keyProperty="shoesid" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into shoes (shoesname, catalogid, sales, 
      isdropoff, adddate, shoesdetails,label
      )
    values (#{shoesname,jdbcType=VARCHAR}, #{catalogid,jdbcType=INTEGER}, #{sales,jdbcType=INTEGER}, 
      #{isdropoff,jdbcType=VARCHAR}, #{adddate,jdbcType=VARCHAR}, #{shoesdetails,jdbcType=VARCHAR},#{label,jdbcType=VARCHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.shoes101.pojo.Shoes" >
    update shoes
    set shoesname = #{shoesname,jdbcType=VARCHAR},
      catalogid = #{catalogid,jdbcType=INTEGER},
      sales = #{sales,jdbcType=INTEGER},
      isdropoff = #{isdropoff,jdbcType=VARCHAR},
      adddate = #{adddate,jdbcType=VARCHAR},
      shoesdetails = #{shoesdetails,jdbcType=VARCHAR},
      label = #{label,jdbcType=VARCHAR}
    where shoesid = #{shoesid,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select shoesid, shoesname, catalogid, sales, isdropoff, adddate, shoesdetails, label
    from shoes
    where shoesid = #{shoesid,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select shoesid, shoesname, catalogid, sales, isdropoff, adddate, shoesdetails, label
    from shoes
  </select>

  <select id="getAllShoes" resultType="Map">
    select shoes.shoesid,shoes.shoesname,shoes.isdropoff,shoes.adddate,shoespic.picaddress,shoessku.quantity from shoes,shoespic,shoessku
  </select>

  <!--10.4作出第一次修改 -->
  <select id="getAllShoesIdAndNameAndPrice" resultType="com.shoes101.vo.FGoodsVo">
     select DISTINCT shoes.shoesid,shoes.shoesname,shoessku.price
     from shoes
     INNER JOIN shoessku
      on shoes.shoesid=shoessku.shoesid
      where shoessku.quantity > 0
  </select>

  <select id="getDetails" resultType="com.shoes101.vo.FDetailsVo">
    select DISTINCT shoes.shoesid,shoes.shoesname,shoessku.price,shoessku.quantity,shoessku.ticketprice,shoes.label
    from shoes
    INNER JOIN shoessku
    on shoes.shoesid=shoessku.shoesid
    where shoes.shoesid=#{shoesid} limit 1
  </select>

  <select id="getAllPicById" resultType="java.lang.String">
    select picaddress from shoespic where shoesid=#{shoesid}
  </select>

  <select id="getSku" resultType="java.lang.Integer">
    select skuid from shoessku where shoesid=#{shoesid}
  </select>

  <select id="getPidById" resultType="com.shoes101.pojo.Splink">
    select * from splink where shoesid=#{shoesid}
  </select>

  <select id="getTheSkuid" resultType="Integer">
    select skuid from shoessku where shoesid=#{shoesid} and skuproperty like ${str} limit 1
  </select>

  <select id="getColorPicForDetail" resultType="java.lang.String">
    select colorpicaddredd from colorpic where skuid=#{skuid}
  </select>

  <select id="getQty" resultType="java.lang.Integer">
    select quantity from shoessku where shoesid=#{shoesid} and skuproperty like ${str}
  </select>

  <select id="getQty2" resultType="com.shoes101.vo.SkuIdAndQtyVo">
    select skuid,quantity from shoessku where shoesid=#{shoesid} and skuproperty like ${str}
  </select>

  <select id="getQty3" resultType="java.lang.Integer">
    select sum(quantity) from shoessku where shoesid=#{shoesid} and skuproperty like ${str}
  </select>

  <select id="getShoesDetail" resultType="java.lang.String">
    select shoesdetails from shoes where shoesid=#{shoesid}
  </select>

  <select id="getAllPic" resultType="java.lang.String">
    select picaddress from shoespic where shoesid=#{shoesid}
  </select>

  <select id="getShoesCatalog" resultType="java.lang.Integer">
    select catalogid from shoes where shoesid=#{shoesid}
  </select>

  <select id="getCatalognameAndFather" resultType="com.shoes101.vo.CatalognameAndParentVo">
    select catalogname,parentid from shoescatalog where catalogid=#{catalogid}
  </select>

  <select id="calTotalQty" resultType="java.lang.Integer">
    select sum(quantity) from shoessku where shoesid=#{shoesid}
  </select>

  <select id="calQtyWithoutOne" resultType="java.lang.Integer">
    select sum(quantity) from shoessku where shoesid=#{shoesid} and skuproperty like ${cdn}
  </select>

  <select id="getShoesForRush" resultType="com.shoes101.vo.RushMVo">
select shoes.shoesid,shoes.shoesname,(select shoessku.price from shoessku where shoes.shoesid = shoessku.shoesid GROUP BY shoes.shoesid) AS price,
(select sum(shoessku.quantity) from shoessku where shoes.shoesid = shoessku.shoesid) AS shoessku,
(SELECT picaddress from shoespic where shoes.shoesid = shoespic.shoesid GROUP BY shoesid) AS shoespic
from shoes
,shoessku
,shoespic
where shoessku.quantity > 0 GROUP BY shoesid
  </select>
<!---->
  <select id="getShoesskuForRush" resultType="com.shoes101.vo.ShoesskuAndPropvnameVo">
    select * from shoessku where shoesid=#{shoesid}
  </select>

  <select id="getCountOfShoes" resultType="java.lang.Integer">
    select count(shoesid) from shoessku where shoesid=#{shoesid}
  </select>

  <select id="getSkuOfShoes" resultType="java.lang.Integer">
    select sum(quantity) from shoessku where shoesid=#{shoesid}
  </select>

  <insert id="sendInRushsku">
    insert into rushsku(quantity,shoesid,skuid,rushbuyid) values (#{quantity},#{shoesid},#{skuid},#{rushbuyid})
  </insert>

  <!--  auth:Vakoe-->
 <!-- getHotSales-->
  <select id="getHotSale" resultType="com.shoes101.vo.FGoodsVo">
      select any_value(e.price) price ,e.shoesid,any_value(e.shoesname) shoesname,any_value(sum(e.skusales)) skusales,any_value(shoes.isdropoff) isdropoff,any_value(shoes.adddate) adddate,any_value(e.buydate) buydate from shoes inner join
      (select d.price,d.shoesid,c.shoesname,d.skusales,c.state,c.validity,c.buydate from shoessku d inner join
      (select b.skuid,b.shoesname,a.state,a.validity,a.buydate from shoesorder a inner join orderdetail b on a.orderid = b.orderid) c on d.skuid = c.skuid) as e on shoes.shoesid = e.shoesid
      where e.state = 3 and e.validity = 1 and shoes.isdropoff=1 and e.buydate like ${dateString}
      GROUP BY (e.shoesid) order by sum(e.skusales) desc limit #{count}
  </select>
  <!--<select id="calQtyWithoutSize" resultType="java.lang.Integer">-->
    <!--select sum(quantity) from shoessku where shoesid=#{shoesid} and skuproperty like ${cdn}-->
  <!--</select>-->
 <!--按分类加筛选属性值得到商品-->
  <select id="getFGoodsVoFilterPvCatalog" resultType="com.shoes101.vo.FGoodsVo">
    select distinct a.shoesid,a.shoesname,a.adddate,a.price from spfilter inner join
    (select distinct shoes.shoesid,shoes.shoesname,shoes.adddate,shoessku.price,shoessku.quantity,shoes.isdropoff,shoes.catalogid from shoes
    INNER JOIN shoessku on shoes.shoesid=shoessku.shoesid where shoessku.quantity > 0 and shoes.isdropoff=1 and shoes.catalogid = #{catalogId}) as a on spfilter.shoesid = a.shoesid
    where json_contains(spfilter.propertyvalueid,${filterList},'$')
  </select>
  <!--按品牌加筛选属性值得到商品（分页）-->
  <select id="getFGoodsVoFilterPvBrand" resultType="com.shoes101.vo.FGoodsVo">
    select c.* from spfilter inner join
    (select DISTINCT a.shoesid,a.shoesname,a.adddate,b.price from shoes as a INNER JOIN
    (select shoessku.* from shoessku inner join splink on shoessku.shoesid = splink.shoesid where splink.propertyvalueid = #{propertyValueId}) as b
    on a.shoesid = b.shoesid where b.quantity>0 and a.isdropoff=1) as c on c.shoesid = spfilter.shoesid
    where json_contains(spfilter.propertyvalueid,${filterList},'$') limit #{start},#{size}
  </select>
  <!--按品牌加筛选属性值得到商品数量-->
  <select id="getFGoodsVoFilterPvBrandCount" resultType="java.lang.Integer">
    select count(*) from spfilter inner join
    (select DISTINCT a.shoesid,a.shoesname,a.adddate,b.price from shoes as a INNER JOIN
    (select shoessku.* from shoessku inner join splink on shoessku.shoesid = splink.shoesid where splink.propertyvalueid = #{propertyValueId}) as b
    on a.shoesid = b.shoesid where b.quantity>0 and a.isdropoff=1) as c on c.shoesid = spfilter.shoesid
    where json_contains(spfilter.propertyvalueid,${filterList},'$')
  </select>
  <!--按名字搜索加筛选属性值得到商品（分页）-->
  <select id="getFGoodsVoFilterPvName" resultType="com.shoes101.vo.FGoodsVo">
    select a.* from spfilter inner join
    (select DISTINCT shoes.shoesid,shoes.shoesname,shoes.adddate,shoessku.price from shoes INNER JOIN
    shoessku on shoes.shoesid=shoessku.shoesid
    where shoessku.quantity > 0 and shoes.isdropoff=1 and shoes.shoesname like ${name}) as a
    on spfilter.shoesid = a.shoesid
    where json_contains(spfilter.propertyvalueid,${filterList},'$') limit #{start},#{size}
  </select>
  <!--按名字搜索加筛选属性值得到商品数量-->
  <select id="getFGoodsVoFilterPvNameCount" resultType="java.lang.Integer">
    select count(*) from spfilter
    inner join (select DISTINCT shoes.shoesid,shoes.shoesname,shoes.adddate,shoessku.price from shoes
    INNER JOIN shoessku on shoes.shoesid=shoessku.shoesid where shoessku.quantity > 0 and shoes.isdropoff=1 and shoes.shoesname like ${name}) as a
    on spfilter.shoesid = a.shoesid where json_contains(spfilter.propertyvalueid,${filterList},'$')
  </select>
</mapper>